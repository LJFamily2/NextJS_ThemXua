'use client';

import React, { useEffect, useState } from 'react';
import Layout from './components/layout/Layout';
import Image from 'next/image';
import ModernSpotlight from './components/ModernSpotlight'; // Corrected import
import RestaurantDesign from './components/RestaurantDesign';
import BookingForm from './components/BookingForm';
import InfiniteScrolling from './components/InfiniteScrolling';

interface HeroData {
  title: string;
  description: string;
  image?: string;
  buttonText: string;
}

interface EventData {
  id: string;
  title: string;
  hook: string;
  time: string;
  image: string;
  slug: string;
}

// Removed SpotlightItem interface as ModernSpotlight handles its own data structure

interface SpotlightData {
  // This is for the "Area Space" spotlight, not the carousel
  title: string;
  description: string;
  items: Array<{
    title: string;
    description: string;
    icon: string;
  }>;
}

export default function Home() {
  const [heroData, setHeroData] = useState<HeroData | null>(null);
  const [events, setEvents] = useState<EventData[]>([]);
  const [spotlightData, setSpotlightData] = useState<SpotlightData | null>(
    null
  );
  // Removed spotlightItems state as ModernSpotlight handles its own data
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchHomeData = async () => {
      try {
        setHeroData({
          title: 'Th·ªÅm X∆∞a',
          description:
            'Tr·∫£i nghi·ªám ·∫©m th·ª±c Vi·ªát Nam ƒë√≠ch th·ª±c t·∫°i kh√¥ng gian ·∫•m c√∫ng v√† th√¢n thi·ªán.',
          buttonText: 'ƒê·∫∑t b√†n ngay',
          image: 'center.webp',
        });

        setSpotlightData({
          title: 'Kh√¥ng Gian ƒê·ªôc ƒê√°o',
          description:
            '√Ånh ƒë√®n d·ªãu nh·∫π, ch·ªó ng·ªìi √™m √°i v√† ti·∫øng tr√≤ chuy·ªán nh·∫π nh√†ng t·∫°o n√™n m·ªôt kh√¥ng gian gi·ªëng nh∆∞ s·ª± m·ªü r·ªông c·ªßa ng√¥i nh√† b·∫°n.',
          items: [
            {
              title: '·∫®m Th·ª±c ƒê√≠ch Th·ª±c',
              description:
                'C√¥ng th·ª©c truy·ªÅn th·ªëng ƒë∆∞·ª£c truy·ªÅn t·ª´ th·∫ø h·ªá n√†y sang th·∫ø h·ªá kh√°c',
              icon: 'üçú',
            },
            {
              title: 'Kh√¥ng Gian ·∫§m C√∫ng',
              description:
                'M√¥i tr∆∞·ªùng ·∫•m c√∫ng v√† ch√†o ƒë√≥n ho√†n h·∫£o cho m·ªçi d·ªãp',
              icon: 'üèÆ',
            },
            {
              title: 'D·ªãch V·ª• Tuy·ªát V·ªùi',
              description:
                'ƒê·ªôi ng≈© nh√¢n vi√™n th√¢n thi·ªán t·∫≠n t√¢m mang ƒë·∫øn tr·∫£i nghi·ªám ƒë√°ng nh·ªõ',
              icon: '‚≠ê',
            },
          ],
        });
        setEvents([
          {
            id: '1',
            title: 'L·ªÖ H·ªôi ·∫®m Th·ª±c Truy·ªÅn Th·ªëng',
            hook: 'Kh√°m ph√° h∆∞∆°ng v·ªã Vi·ªát Nam qua c√°c m√≥n ƒÉn ƒë·∫∑c s·∫Øc',
            time: '15:00 - 22:00',
            image: 'event1.jpg',
            slug: 'le-hoi-am-thuc-truyen-thong',
          },
          {
            id: '2',
            title: 'ƒê√™m Nh·∫°c D√¢n Ca',
            hook: 'Th∆∞·ªüng th·ª©c √¢m nh·∫°c truy·ªÅn th·ªëng trong kh√¥ng gian ·∫•m c√∫ng',
            time: '19:00 - 21:00',
            image: 'event2.jpg',
            slug: 'dem-nhac-dan-ca',
          },
        ]);

        // Removed mock spotlightItems data fetching as ModernSpotlight handles its own data
      } catch (error) {
        console.error('Error fetching home data:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchHomeData();
  }, []);

  if (loading) {
    return (
      <Layout>
        <div className="min-h-screen flex items-center justify-center">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-orange-600 mx-auto mb-4"></div>
            <p className="text-gray-600">ƒêang t·∫£i...</p>
          </div>
        </div>
      </Layout>
    );
  }
  return (
    <Layout currentPage="home">
      {/* ModernSpotlight component - no longer takes 'items' prop */}
      <ModernSpotlight />
      {/* Hero Section */}
      {heroData && (
        <section id="heroContainer" className="hero-section">
          <div className="hero-content">
            <div className="hero-title">
              <h1 className="hero-main-title">{heroData.title}</h1>
              <h5 className="hero-description">{heroData.description}</h5>
              <div className="hero-buttons">
                <button className="hero-btn primary">
                  <a href="#bookingContainer" className="btn-link">
                    {heroData.buttonText}
                  </a>
                </button>
                <span className="hero-text">
                  ho·∫∑c g·ªçi ngay{' '}
                  <a href="tel:+84123456789" className="phone-link">
                    <strong>+84 123 456 789</strong>
                  </a>
                </span>
              </div>
            </div>
            {heroData.image && (
              <div className="hero-media">
                <Image
                  src={`/images/${heroData.image}`}
                  alt="H√¨nh ·∫£nh trang ch·ªß c·ªßa nh√† h√†ng"
                  width={800}
                  height={600}
                  className="hero-image"
                  priority
                />
              </div>
            )}
          </div>
        </section>
      )}
      {/* Restaurant Design Section */}
      <RestaurantDesign />
      {/* Spotlight Section - Area Space */}
      {spotlightData && (
        <div className="spotlight-section">
          <div className="spotlight-container">
            <div className="spotlight-title-container">
              <h1 className="spotlight-title">{spotlightData.title}</h1>
              <p className="spotlight-description">
                {spotlightData.description}
              </p>
            </div>
            <div className="spotlight-features">
              <div className="features-grid">
                {spotlightData.items.map((item, index) => (
                  <div key={index} className="feature-item">
                    <div className="feature-icon">{item.icon}</div>
                    <h3 className="feature-title">{item.title}</h3>
                    <p className="feature-description">{item.description}</p>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      )}
      {/* Events Section */}
      {events.length > 0 && (
        <section className="events-section" id="eventsContainer">
          <div className="events-container">
            <h2 className="events-title">S·ª± Ki·ªán ƒê·∫∑c Bi·ªát</h2>
            <div className="events-grid">
              {events.map(event => (
                <div key={event.id} className="event-card">
                  <a href={`/events/${event.slug}`} className="event-link">
                    <div className="event-image-container">
                      <Image
                        src={`/images/${event.image}`}
                        alt={`H√¨nh ·∫£nh s·ª± ki·ªán ${event.title}`}
                        width={400}
                        height={300}
                        className="event-image"
                      />
                    </div>
                    <div className="event-information">
                      <h3 className="event-title">{event.title}</h3>
                      <p className="event-hook">{event.hook}</p>
                      <span className="event-divider">-------------</span>
                      <time className="event-time">{event.time}</time>
                    </div>
                  </a>
                </div>
              ))}
            </div>
          </div>
        </section>
      )}{' '}
      {/* Include booking section inline */}
      <BookingForm
        backgroundImage="darkwood.webp"
        restaurantPhone="+84 123 456 789"
      />
      {/* Infinite Scrolling */}
      <InfiniteScrolling text="Th·ªÅm X∆∞a" />
    </Layout>
  );
}
